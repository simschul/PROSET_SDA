
list <- create_random_IOtable(8, 2, 4) 

dims <- get_indices(list)
# 1. for loops --------------------------------------
a <- array(dim = dims)
system.time({
  for(i in 1:dims[1]) {
    for(ii in 1:dims[2]) {
      for(iii in 1:dims[3]) {
        for(iiii in 1:dims[4]) {
          a[i, ii, iii, iiii] <- list[[1]][i, ii] * list[[2]][ii, iii] * list[[3]][iii, iiii]      
        }
      }
    }
  }  
})

# subsetting
list1 <- list[c("L", "Y")]
dims <- get_indices(list1)
b <- array(dim = dims)
system.time({
  for(i in 1:dims[1]) {
    for(ii in 1:dims[2]) {
      for(iii in 1:dims[3]) {
          b[i, ii, iii] <- list1[[1]][i, ii] * list1[[2]][ii, iii]       
      }
    }
  }  
})



system.time(test <- list[[1]] %*% list[[2]] %*% list[[3]] )

sum(a)



# 2. rcpp ---------------------------------------------

library(Rcpp)

# Simple C++ code for matrix multiplication
mm_code = 
  "NumericVector my_mm(NumericMatrix m, NumericVector v){
          int nRow = m.rows();
          int nCol = m.cols();
          NumericVector ans(nRow);
          double v_j;
          for(int j = 0; j < nCol; j++){
            v_j = v[j];
            for(int i = 0; i < nRow; i++){
              ans[i] += m(i,j) * v_j;
            }
          }
         return(ans);
 }
 "
# Compiling
my_mm = cppFunction(code = mm_code)
