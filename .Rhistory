colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))]
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
sum(na.rm = TRUE)
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)]
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
sum(na.rm = TRUE)
subtree_total
infert
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.vector
subtree_total
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric
subtree_total
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric %>%
sum(na.rm = TRUE)
subtree_total
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric %>%
.[which(. != -Inf)] %>%
sum(na.rm = TRUE)
subtree_total
subtree_total + test[, sum(value)] + resid
total
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x > tol_subtree, NA, x))]
colrow_sums$col.sums
subtree_total + test[, sum(value)] + resid + 87.0195
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))]
#subtree_total +
test[, sum(value)] + resid + 87.0195+75.56018+57.07821+60.0779
105.79625+ 82.42564 +86.82803+ 87.0195
test[, sum(value)] + resid +105.79625+ 82.42564 +86.82803+ 87.0195
total
test[, order == 6]
test[order == 6]
test[order == 5]
colrow_sums$col.sums
tol_subtree
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
S %*% Y
colrow_sums$col.sums %>% rowSums()
875+320
S %*% diag(Y)
S
diag(Y)
S %*% diag(Y %>% as.numeric)
(S %*% diag(Y %>% as.numeric)) - colrow_sums$col.sums[1,]
colrow_sums$col.sums
(S %*% diag(Y %>% as.numeric)) + colrow_sums$col.sums[1,]
(S %*% diag(Y %>% as.numeric)) + colrow_sums$col.sums[1,] %>% sum
((S %*% diag(Y %>% as.numeric)) + colrow_sums$col.sums[1,]) %>% sum
test[order == 1]
test[order == 2]
test[order == 3]
test[order == 4]
test[order == 5]
Rcpp::sourceCpp('SPA_functions.cpp')
colrow_sums$col.sums %>% rowSums()
((S %*% diag(Y %>% as.numeric)) + colrow_sums$col.sums[1,]) %>% sum
tol_subtree <- 0  #1E10
tol <- 0.1  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
system.time({
resid2 <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test2 <- fread("example.txt")
test2
test2 <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
test2 <- tstrsplit(test2$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test2) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
total <- colrow_sums$total$row.sums %>% sum
test[, sum(value)] / total
test2[, sum(value)] / total
resid / total
test2 + resid
test2[, sum(value)] + resid
test2
tol
tol_subtree
test <- fread("example.txt")
test
test <- tstrsplit(test2$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
test
total <- colrow_sums$total$row.sums %>% sum
total
test[, sum(value)] / total
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric %>%
.[which(. != -Inf)] %>%
sum(na.rm = TRUE)
subtree_total
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)]
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric
colrow_sums$col.sums
colrow_sums$col.sums[5,]
colrow_sums$col.sums[5,] %>% sum
test[, sum(value)] + resid + colrow_sums$col.sums[5,] %>% sum
total
resid
test[, sum(value)] + resid2 + colrow_sums$col.sums[5,] %>% sum
resid2
test[, sum(value)] + resid2
colrow_sums$col.sums[5,] %>% sum
test[, sum(value)] + resid2 + colrow_sums$col.sums[5,] %>% sum
test[, sum(value)] + resid2 + colrow_sums$row.sums[5,] %>% sum
colrow_sums
test[, sum(value)] + resid2 + colrow_sums$row.sums[5,] %>% sum
(test[, sum(value)] + resid2 + colrow_sums$row.sums[5,] %>% sum)/total
total
tol_subtree <- 0  #1E10
tol <- 0  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
#colrow_sums$col.sums[which(colrow_sums$col.sums < tol_subtree)] <- NA
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, min, na.rm = TRUE)] %>%
sum(na.rm = TRUE) / (colrow_sums$total$col.sums %>% sum)
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
total <- colrow_sums$total$row.sums %>% sum
test[, sum(value)] / total
resid / total
resid
(test[, sum(value)] + resid2 + colrow_sums$row.sums[5,] %>% sum) / total
(test[, sum(value)] + resid + colrow_sums$row.sums[5,] %>% sum) / total
(test[, sum(value)] + resid + colrow_sums$row.sums[5,] %>% sum)
n_layers <- 6
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, L = L, n_layers))
tol_subtree <- 0  #1E10
tol <- 0  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
#colrow_sums$col.sums[which(colrow_sums$col.sums < tol_subtree)] <- NA
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, min, na.rm = TRUE)] %>%
sum(na.rm = TRUE) / (colrow_sums$total$col.sums %>% sum)
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
total <- colrow_sums$total$row.sums %>% sum
total
(test[, sum(value)] + resid + colrow_sums$row.sums[6,] %>% sum) / total
(test[, sum(value)] + resid + colrow_sums$row.sums[6,] %>% sum)
total
resid
colrow_sums$row.sums[6,]
S %*% A %*% A %*% A %*% A %*% Y
colrow_sums$row.sums[6,] %>% sum
colrow_sums$row.sums[7,] %>% sum
colrow_sums$col.sums[5,] %>% sum
(test[, sum(value)] + resid + colrow_sums$col.sums[5,] %>% sum) / total
(test[, sum(value)] + resid + colrow_sums$col.sums[6,] %>% sum) / total
colrow_sums$col.sums[5,] %>% sum
S %*% A %*% A %*% A %*% A %*% Y
colrow_sums$col.sums[6,] %>% sum
S %*% A %*% A %*% A %*% Y
colrow_sums$row.sums[6,] %>% sum
colrow_sums$row.sums
(S %*% L %*% Y) - (S %*% A %*% A %*% A %*% Y)
colrow_sums$row.sums[6,] %>% sum
colrow_sums$row.sums[3,] %>% sum
(S %*% L %*% Y)
(S %*% A %*% A %*% A %*% Y)
leontief_series_expansion(A, 5)
l_series <- leontief_series_expansion(A, 5)
l_series
lapply(1:length(l_series), function(x) S %*% x %*% Y)
lapply(l_series, function(x) S %*% x %*% Y)
fp_series <- lapply(l_series, function(x) S %*% x %*% Y)
fp_series
fp_series_sum <- fp_series %>% unlist %>% sum
fp_series_sum
total - fp_series_sum
test[, sum(value)] + resid
fp_series_dif <- total - fp_series_sum
test[, sum(value)] + resid + fp_series_dif
(test[, sum(value)] + resid + colrow_sums$col.sums[5,] %>% sum) / total
(test[, sum(value)] + resid + colrow_sums$col.sums[5,] %>% sum)
test[, sum(value)] + resid + fp_series_dif
l_series <- leontief_series_expansion(A, 6)
fp_series <- lapply(l_series, function(x) S %*% x %*% Y)
fp_series_sum <- fp_series %>% unlist %>% sum
fp_series_dif <- total - fp_series_sum
test[, sum(value)] + resid + fp_series_dif
Rcpp::sourceCpp('SPA_functions.cpp')
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
total <- colrow_sums$total$row.sums %>% sum
test[, sum(value)] / total
resid / total
(test[, sum(value)] + resid + colrow_sums$col.sums[5,] %>% sum)
(test[, sum(value)] + resid + colrow_sums$col.sums[6,] %>% sum)
(S %*% L %*% Y)
colrow_sums$row.sums[3,] %>% sum
resid
tol <- 0.1  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
tol_subtree <- 80  #1E10
tol <- 0.1  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
#colrow_sums$col.sums[which(colrow_sums$col.sums < tol_subtree)] <- NA
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, min, na.rm = TRUE)] %>%
sum(na.rm = TRUE) / (colrow_sums$total$col.sums %>% sum)
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
total <- colrow_sums$total$row.sums %>% sum
test[, sum(value)] / total
resid / total
(test[, sum(value)] + resid + colrow_sums$col.sums[6,] %>% sum)
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, max, na.rm = TRUE)] %>%
as.numeric %>%
.[which(. != -Inf)] %>%
sum(na.rm = TRUE)
subtree_total
(test[, sum(value)] + resid
test[, sum(value)] + resid
797+875
resid
colrow_sums$col.sums
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))]
subtree_total <- colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, min, na.rm = TRUE)] %>%
as.numeric %>%
.[which(. != -Inf)] %>%
sum(na.rm = TRUE)
subtree_total
(test[, sum(value)] + resid + subtree_total)  #colrow_sums$col.sums[6,] %>% sum)
tol <- 0  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
#colrow_sums$col.sums[which(colrow_sums$col.sums < tol_subtree)] <- NA
colrow_sums$col.sums %>% as.data.table %>%
.[, lapply(.SD, function(x) ifelse(x < tol_subtree, NA, x))] %>%
.[, lapply(.SD, min, na.rm = TRUE)] %>%
sum(na.rm = TRUE) / (colrow_sums$total$col.sums %>% sum)
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
colrow_sums$row.sums
S %*% A %*% diag(Y %>% as.numeric)
(S %*% L %*% diag(Y %>% as.numeric)) - S %*% A %*% diag(Y %>% as.numeric)
(S %*% L %*% diag(Y %>% as.numeric)) - S %*% diag(Y %>% as.numeric)
n_layers <- 20
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, L = L, n_layers))
colrow_sums
colrow_sums$row.sums %>% colSums()
colrow_sums$row.sums %>% plot
colrow_sums$row.sums %>% plot(.[,1])
plot(1:20, colrow_sums$row.sums[,1])
lines(1:20, colrow_sums$row.sums[,2])
lines(1:20, colrow_sums$row.sums[,3])
lines(1:20, colrow_sums$row.sums[,4])
n_layers <- 6
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, L = L, n_layers))
colrow_sums
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, L, n) {
if(dim(S)[1] > 1) stop("S needs to be either vector or matrix with nrow == 1
(currently only implemented for one stressor)")
if(!is.null(dim(Y))) Y <- rowSums(Y)
total_em <- diag(S %>% as.numeric) %*% (L %*% diag(Y))
total_row.sums <-   total_em %>% rowSums
total_col.sums <-  total_em %>% colSums
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- create_named_list(c("row.sums", "col.sums"))
#list[["total"]] <- data.table("row.sums" = total_row.sums, "col.sums" = total_col.sums)
list[["row.sums"]] <- list[["col.sums"]] <- matrix(ncol = ncol(A), nrow = n)
list$row.sums[1,] <- total_row.sums
list$col.sums[1,] <- total_col.sums
for(i in 2:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y))
total_row.sums <- total_row.sums - rowSums(tmp)
total_col.sums <- total_col.sums - colSums(tmp)
list$row.sums[i,] <- total_row.sums
list$col.sums[i,] <- total_col.sums
# list[[i]][["row.sums"]] <- rowSums(tmp)
# list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
colrow_sums <- calc_colrow_sums(S, A, Y, L, 9)
colrow_sums
Rcpp::sourceCpp('SPA_functions.cpp')
n_layers <- 6
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, L = L, n_layers))
tol_subtree <- 80  #1E10
tol <- 0  #1E6
apply(colrow_sums$col.sums, 1, function(x) {
x[which(x > tol_subtree)] %>% length
})
system.time({
resid <- spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 5, tol = tol, tol_subtree = tol_subtree, tol_row = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
resid
test <- fread("example.txt")
test
test <- tstrsplit(test$paths, " ") %>% as.data.table %>%
setnames(paste0("dim", 1:length(names(.)))) %>%
.[, lapply(.SD, as.numeric)] %>%
.[, lapply(.SD, function(x)(ifelse(x == "nan", NA, x)))] %>%
cbind(., test) %>%
.[, paths := NULL] %>%
.[, "rank" := frankv(value, order = -1)] %>%
setorder(., rank)
test
test
test[order == 6]
test[order == 6 & dim6 == 4]
colrow_sums$row.sums
test[order == 5]
test[order == 5]$dim5 %>% unique
test[order == 4]$dim5 %>% unique
test[order == 4]$dim4 %>% unique
test[order == 3]$dim3 %>% unique
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
spa_recurs
n_layers
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(NA, length = n_layers), n_ind = 4,
index = 1, tol = 0.1 )
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1 )
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1, L_max = n_layers, Layer = 1)
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0.1, L_max = n_layers, Layer = 1)
n_layers
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0, L_max = n_layers, Layer = 1)
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
Rcpp::sourceCpp('SPA_functions.cpp')
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0, L_max = n_layers, Layer = 1)
# test recursive rcpp -------------
spa_recurs(S = S, A = A, x = 0, path = vector(length = n_layers), n_ind = 4,
index = 1, tol = 0, L_max = n_layers, Layer = 1, emissions = 0)
