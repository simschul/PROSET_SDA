decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
return(decomp)
}
test <- sda_fun(x1, x2, emission_calculator)
sda_fun <- function(year0, year1, fun) {
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
#print(delta)
decomp <- create_named_list(names(year0))
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
cat(i, "\n")
print(temp0)
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
return(decomp)
}
test <- sda_fun(x1, x2, emission_calculator)
test
x1 <- io_table$year0[c("S", "L", "Y")]
x2 <- io_table$year1[c("S", "L", "Y")]
test <- sda_fun(x1, x2, emission_calculator)
test
# 1. Structural decomposition analysis according to dietzenbacher 1998 ---------
d_S <- io_table$year1$S - io_table$year0$S
d_L <- io_table$year1$L - io_table$year0$L
d_Y <- io_table$year1$Y - io_table$year0$Y
0.5 * (d_S %*% io_table$year0$L %*% io_table$year0$Y +
d_S %*% io_table$year1$L %*% io_table$year1$Y)
0.5 * (IO_calculator(d_S, io_table$year0$L, io_table$year0$Y) +
IO_calculator(d_S, io_table$year1$L, io_table$year1$Y))
0.5 * (IO_calculator(io_table$year0$S, d_L, io_table$year1$Y) +
IO_calculator(io_table$year1$S, d_L, io_table$year0$Y))
0.5 * (IO_calculator(io_table$year0$S, io_table$year0$L, d_Y) +
IO_calculator(io_table$year1$S, io_table$year1$L, d_Y)
0.5 * (IO_calculator(io_table$year0$S, io_table$year0$L, d_Y) +
IO_calculator(io_table$year1$S, io_table$year1$L, d_Y))
0.5 * (IO_calculator(io_table$year0$S, io_table$year0$L, d_Y) +
IO_calculator(io_table$year1$S, io_table$year1$L, d_Y))
d_B
log(d_B)
log(B)
log(mrio1$S)
log_mean <- function(x, y) {
return((x - y) / (log(x) - log(y)))
}
log_mean(2,3)
emission_calculator(x2)
b2 <- emission_calculator(x2)
b1 <- emission_calculator(x1)
log_mean(b2, b1)
b1
b2
log_mean(b2, b1) %*% (log(io_table$year1$S) / log(io_table$year0$S))
log(io_table$year0$S)
log(io_table$year1$S)
(log(io_table$year1$S) / log(io_table$year0$S))
log_mean(b2, b1)
log_mean(b2, b1) %*% (log(io_table$year1$S) / log(io_table$year0$S))
log_mean(b2, b1) * (log(io_table$year1$S) / log(io_table$year0$S))
test
log_mean(b2, b1) * (log(io_table$year1$S / io_table$year0$S))
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
debugSource('~/Documents/PhD_PROSET/code/R/SDA/SDA/./sda.R', echo=TRUE)
decomp
fun(year1)
log_mean(fun(year1), fun(year0))
log(year1[[i]] / year0[[i]])
i
year1[[i]]
year1
log_mean(b2, b1) * (log(io_table$year1$S / io_table$year0$S))
log_mean(b2, b1) * (log(io_table$year1$Y / io_table$year0$Y))
(log(io_table$year1$Y / io_table$year0$Y))
log_mean(b2, b1)
log_mean(b2, b1) * (log(io_table$year1$Y / io_table$year0$Y))
log_mean(b2, b1) *
log_mean(b2, b1)
log_mean(b2, b1)
io_table$year1$Y
io_table$year1$Y / io_table$year0$Y
log(io_table$year1$Y / io_table$year0$Y)
mrio1[["E"]] <- sample(x = 10:500, size = n_dim)
mrio1[["E"]]
############################################################################## #
##### settings #################################################################
############################################################################## #
path2temp_results <- "./temp_results"
n_countries <- 2
n_sectors <- 2
n_dim <- n_countries * n_sectors
n_fdcats <- 1
n_emissions <- 2
# meta data
names_countries <- c("Germany", "RoW")
names_industries <- c("Ag", "Ma")
years <- c(2000, 2010)
set.seed(123)
############################################################################## #
##### Create simple EE-MRIO table #############################################################
############################################################################## #
# IO table for year 0
mrio1 <- list()
mrio1[["Z"]] <- matrix(c(1,5,2,4,
4,2,1,3,
6,4,3,1,
5,3,4,2),
ncol = n_dim, nrow = n_dim, byrow = TRUE)
mrio1[["Y"]] <- c(9,5,4,3)
mrio1[["va"]] <- c(5,1,8,7)
mrio1[["E"]] <- sample(x = 10:500, size = n_dim)
mrio1 <- c(mrio1, IO_creator(Z = mrio1$Z, Y = mrio1$Y, va = mrio1$va, E = mrio1$E))
mrio1
# IO table for year 1
mrio2 <- list()
mrio2[["Z"]] <- matrix(c(1,4,1,2,
3,3,1,2,
8,5,4,2,
6,5,4,4),
n_dim, n_dim, byrow = TRUE)
mrio2[["Y"]] <- c(11, 9, 4, 6)
x <- apply(mrio2$Z, 1, sum) + mrio2$Y
mrio2[["va"]] <- x - apply(mrio2$Z, 2, sum)
apply(mrio2$Z, 2, sum) + mrio2$va
curve(dnorm(x, mean = -0.3, sd = 0.15), xlim = c(-2, 2))
mrio2[["E"]] <- mrio1$E + (mrio1$E * rnorm(8, mean = -0.3, sd = 0.15))
mrio2[["E"]]
mrio2[["E"]] <- mrio1$E + (mrio1$E * rnorm(n_dim, mean = -0.3, sd = 0.15))
mrio2[["E"]]
mrio2 <- c(mrio2, IO_creator(Z = mrio2$Z, Y = mrio2$Y, va = mrio2$va, E = mrio2$E))
# save io tables
IO_example <- list("year0" = mrio1,
"year1" = mrio2)
saveRDS(IO_example, file = file.path(path2temp_results, "IO_example.RData"))
############################################################################## #
##### load data #############################################################
############################################################################## #
io_table <- readRDS(file.path(path2temp_results, "IO_example.RData"))
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test <- sda_fun(x1, x2, emission_calculator)
test
x1 <- io_table$year0[c("S", "L", "Y")]
x2 <- io_table$year1[c("S", "L", "Y")]
test <- sda_fun(x1, x2, emission_calculator)
test
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
debugSource('~/Documents/PhD_PROSET/code/R/SDA/SDA/./sda.R', echo=TRUE)
fun(year1)
log_mean(fun(year1), fun(year0))
(log(year1[[i]] / year0[[i]])
(log(year1[[i]] / year0[[i]]))
(log(year1[[i]] / year0[[i]]))
(log(year1[[i]] / year0[[i]]))
log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
i
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
cat(i, "")
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
decomp
cat(i, "")
debugSource('~/Documents/PhD_PROSET/code/R/SDA/SDA/./sda.R', echo=TRUE)
i
decomp[[i]]
decomp
log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
debugSource('~/Documents/PhD_PROSET/code/R/SDA/SDA/./sda.R', echo=TRUE)
decomp
decomp
log_mean(b2, b1) * (log(io_table$year1$Y / io_table$year0$Y))
b2 <- emission_calculator(x2)
b1 <- emission_calculator(x1)
b2
b1
log_mean(b2, b1) * (log(io_table$year1$Y / io_table$year0$Y))
decomp <- list()
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
cat(i, "")
decomp[[i]] <- log_mean(fun(year1), fun(year0)) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test <- sda_fun(x1, x2, emission_calculator)
test
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test2
decomp
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
cat(i, "")
decomp[[i]] <- as.numeric(log_mean(fun(year1), fun(year0))) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test2
lapply(test2, sum)
lapply(test2, sum) %>% unlist %>% sum
b2 <- emission_calculator(x2)
b1 <- emission_calculator(x1)
b2
b1
b1 <- emission_calculator(x1) %>% sum
b2 <- emission_calculator(x2) %>% sum
b2
b1
x1
x2
b2
b1
test2
test
lapply(test, sum) %>% unlist %>% sum
b2 - b2
b2 - b1
b2
b1
test
lapply(test, sum)
lapply(test, sum) %>% unlist %>% sum
b2 - b1
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
sda_fun <- function(year0, year1, fun, type = "AMDI") {
#if(type != "polar_average") stop("Only method 'polar average' implemented so far")
if(length(year0) != length(year1)) stop("Both lists need to be of same legnth")
if(!all.equal(names(year0), names(year1))) stop("both lists need same elements in same order")
n <- length(year0)
# calculate difference for each argument between year 0 and year 1
delta <- create_named_list(names(year0))
for(i in 1:n) {
delta[[i]] <- year1[[i]] - year0[[i]]
}
decomp <- create_named_list(names(year0))
if(type == "AMDI") {
temp0 <- create_named_list(names(year0))
temp1 <- create_named_list(names(year0))
for(i in 1:n) {
# all components on the left hand side from year 0, right: year 1
temp0[1:i] <- year0[1:i]
temp0[i:n] <- year1[i:n]
temp0[[i]] <- delta[[i]]
# the other way round
temp1[1:i] <- year1[1:i]
temp1[i:n] <- year0[i:n]
temp1[[i]] <- delta[[i]]
decomp[[i]] <- 0.5 * (fun(temp0) + fun(temp1))
}
} else if(type == "LMDI1") {
for(i in 1:n) {
decomp[[i]] <- as.numeric(log_mean(fun(year1), fun(year0))) * (log(year1[[i]] / year0[[i]]))
}
}
return(decomp)
}
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test2
lapply(test2, sum) %>% unlist %>% sum
lapply(test2, sum) %>% unlist %>% sum
, sum) %>% unlist %>% sum
lapply(test, sum) %>% unlist %>% sum
emission_calculator <- function(list) {
x <- as.numeric(list[[2]] %*% list[[3]])
B <- list[[1]] %*% x
# B <- list[[1]] %*% diag(x)
return(B)
}
b2 <- emission_calculator(x2) %>% sum
b1 <- emission_calculator(x1) %>% sum
b2
b1
emission_calculator(x2) %>%
emission_calculator(x2)
emission_calculator(x2)
x1 <- io_table$year0[c("S", "L", "Y")]
x2 <- io_table$year1[c("S", "L", "Y")]
test <- sda_fun(x1, x2, emission_calculator)
test
lapply(test, sum) %>% unlist %>% sum
test2 <- sda_fun(x1, x2, emission_calculator, type = "LMDI1")
test2
lapply(test2, sum) %>% unlist %>% sum
b2 - b1
lapply(test, sum) %>% unlist %>% sum
x2
