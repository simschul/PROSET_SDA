step3 <- step2 %*% A
step3
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
step3 <- A %*% step2
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
step4 <- A %*% step3
diag(S %>% as.numeric) %*% ((A %*% A %*% A) %*% diag(Y %>% as.numeric))
step4
step1 <- diag(S %>% as.numeric) %*%  diag(Y %>% as.numeric)
step2 <- diag(S %>% as.numeric) %*% (A %*% diag(Y %>% as.numeric))
step3 <- A %*% step2
step4 <- A %*% step3
step4
diag(S %>% as.numeric) %*% ((A %*% A %*% A) %*% diag(Y %>% as.numeric))
step3
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
step3
step1 <- diag(S %>% as.numeric) %*%  diag(Y %>% as.numeric)
step2 <- diag(S %>% as.numeric) %*% (A %*% diag(Y %>% as.numeric))
step3 <- A %*% step2
step3
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
step2
step2
diag(S %>% as.numeric) %*% ((A) %*% diag(Y %>% as.numeric))
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
step3 <- A %*% step2
step3
step2
step2
fp_series <- lapply(L_series, function(x) {
diag(S %>% as.numeric) %*% (x %*% diag(as.numeric(Y)))
})
L_series <- leontief_series_expansion(A, 9)
fp_series <- lapply(L_series, function(x) {
diag(S %>% as.numeric) %*% (x %*% diag(as.numeric(Y)))
})
fp_series
step2
F_total
# Step 1 -----------------------------------------------------------------------
# calculate total emission
F_total <- S %*% L
F_total
# Step 1 -----------------------------------------------------------------------
# calculate total emission
F_total <- diag(S %>% as.numeric) %*% L
F_total
F_total %>% sum
# Step 1 -----------------------------------------------------------------------
# calculate total emission
#F_total <- diag(S %>% as.numeric) %*% L
F_total <- S %*% L
F_total
F_total %>% sum
setMethodS3("contributionSubtree", "Node", function(this, S, A, y, F_total) {
Z <- this$.path
len <- length(Z)
node.z <- y[Z[1]]
if(len > 1) {
for(i in 2:len) {
node.z <- node.z * A[Z[i], Z[i-1]]
}
}
return(F_total[Z[len]] * node.z)
})
test_node <- Node()
test_node$.path <- c(1,2,3)
contributionSubtree(test_node, S, A, Y, F_total)
F_total
setMethodS3("contributionSubtree", "Node", function(this, S, A, y, F_total) {
Z <- this$.path
len <- length(Z)
node.z <- y[Z[1]]
if(len > 1) {
for(i in 2:len) {
node.z <- node.z * A[Z[i], Z[i-1]]
}
}
print(node.z)
return(F_total[Z[len]] * node.z)
})
contributionSubtree(test_node, S, A, Y, F_total)
source("./settings.R")
source("./functions.R")
# load data --------------------------------------------------------------------
io_table <- readRDS(file.path(path2temp_results, "IO_example.RData"))
S <- io_table$year0$S
L <- io_table$year0$L
A <- io_table$year0$A
Y <- io_table$year0$Y
test
# load data --------------------------------------------------------------------
io_table <- readRDS(file.path(path2temp_results, "IO_example.RData"))
S <- io_table$year0$S
L <- io_table$year0$L
A <- io_table$year0$A
Y <- io_table$year0$Y
A
L_series <- leontief_series_expansion(A, 9)
L_series
leontief_series_expansion
step1 <- diag(S %>% as.numeric) %*%  diag(Y %>% as.numeric)
step1
step2 <- diag(S %>% as.numeric) %*% (A %*% diag(Y %>% as.numeric))
step2
step3 <- A %*% step2
step3
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric))
S %*% A %*% Y %>% sum
S %*% diag(A[1,] %>% as.numeric)
S %*% A %*% A %*% Y %>% sum
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric)) %>% sum
diag(S %>% as.numeric) %*% ((A %*% A) %*% diag(Y %>% as.numeric)) #%>% sum
A^2
A %*% A
leontief_series_expansion
leontief_series_expansion <- function(A_mat, n) {
list <- vector(mode = "list", length = n)
list[[1]] <- diag(1, nrow = nrow(A_mat), ncol = ncol(A_mat))
for(i in 2:n) {
list[[i]] <- list[[i-1]] %*% A_mat
}
return(list)
}
leontief_series_expansion2 <- function(A_mat, n) {
list <- vector(mode = "list", length = n)
list[[1]] <- diag(1, nrow = nrow(A_mat), ncol = ncol(A_mat))
for(i in 2:n) {
list[[i]] <- A_mat %*% list[[i-1]]
}
return(list)
}
t1 <- leontief_series_expansion(A, 4)
t2 <- leontief_series_expansion2(A, 4)
t2
all.equal(t1, t2)
t2
t1
Y
Y %>% colSums()
Y %>% rowSums()
leontief_series_expansion
step2 <- diag(S %>% as.numeric) %*% (A %*% diag(Y %>% as.numeric))
step2
%*% (A %*% Y)
(A %*% Y)
diag((A %*% Y) %>% as.numeric)
S %*% diag((A %*% Y) %>% as.numeric)
IO_calculator
S %*% ((A %*% diag(Y %>% as.numeric)))
S %*% diag((A %*% Y) %>% as.numeric)
diag(Y %>% as.numeric)
(A %*% diag(Y %>% as.numeric))
diag((A %*% Y) %>% as.numeric)
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
list[[i]] <- diag(S %>% as.numeric) %*% (A_new %*% diag(Y %>% as.numeric))
if(i < n) A_new <- A_new %*% A
}
return(list)
}
calc_colrow_sums(S, A, Y, 4)
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y))
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
calc_colrow_sums(S, A, Y, 4)
step1 <- diag(S %>% as.numeric) %*%  diag(Y %>% as.numeric)
step2 <- diag(S %>% as.numeric) %*% (A %*% diag(Y %>% as.numeric))
step3 <- A %*% step2
step4 <- A %*% step3
step1
step2
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% diag((A_new %*% Y) %>% as.numeric)
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
total_row_sum <- diag(S %>% numeric) %*% diag((L %*% Y) %>% as.numeric)
diag((L %*% Y) %>% as.numeric)
diag(S %>% numeric)
total_row_sum <- diag(S %>% as.numeric) %*% diag((L %*% Y) %>% as.numeric)
total_row_sum
total_row_sum <- diag(S %>% as.numeric) %*% (L %*% diag(Y %>% as.numeric))
total_row_sum
L
total_row_sum <- diag(S %>% as.numeric) %*%
(L %*% diag(Y %>% as.numeric))
(L %*% diag(Y %>% as.numeric))
diag(Y %>% as.numeric)
calc_colrow_sums(S, A, Y, 4)
(L %*% diag(Y %>% as.numeric))
L
(L %*% diag(Y %>% as.numeric)) %>% sum
L %*% Y %>% sum
(L %*% diag(Y %>% as.numeric)) %>% colSums
(L %*% diag(Y %>% as.numeric)) %>% rowSums
(L %*% diag(Y %>% as.numeric)) %>% colSums
(L %*% diag(Y %>% as.numeric)) %>% colSums %>%
S
(L %*% diag(Y %>% as.numeric)) %>% colSums %>%
`*`(S)
(L %*% diag(Y %>% as.numeric)) %>% colSums %>%
`*`(S) %>% sum
S %*% L %*% Y %>% sum
(L %*% diag(Y %>% as.numeric)) %>% rowSums %>%
`*`(S) %>% sum
(L %*% diag(Y %>% as.numeric))
(L %*% diag(Y %>% as.numeric))
(L %*% diag(Y %>% as.numeric)) %>%
`*`(S) #%>% sum
L
Y
L[,1] * Y[1,]
L[,2] * Y[2,]
L[,1] * Y[1,]
(L %*% diag(Y %>% as.numeric))
xmat <-   (L %*% diag(Y %>% as.numeric))
xmat
%>% rowSums %>%
xmat %*% diag(S)
%>% rowSums %>%
xmat %*% diag(S %>% as.numeric)
S
S[1]
xmat[1,] * S[1]
xmat[1,]
%>% rowSums %>%
xmat %*% diag(S %>% as.numeric)
xmat[1,] * S[1]
S[1]
xmat
%>% rowSums %>%
diag(S %>% as.numeric) %*% xmat
xmat[1,] * S[1]
xmat[2,] * S[2]
%>% rowSums %>%
diag(S %>% as.numeric) %*% xmat
%>% rowSums %>%
diag(S %>% as.numeric) %*% xmat %>% sum
S %*% L %*% Y %>% sum
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% diag(A_new %*% diag(Y %>% as.numeric))
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
calc_colrow_sums(S, A, Y, 4)
tmp
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% diag(A_new %*% diag(Y %>% as.numeric))
print(tmp)
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
calc_colrow_sums(S, A, Y, 4)
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y %>% as.numeric))
print(tmp)
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
calc_colrow_sums(S, A, Y, 4)
test <- calc_colrow_sums(S, A, Y, 4)
lapply(test[[2]], sum)
lapply(test[[3]], sum)
dim(S)
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
if(dim(S)[1] > 1) stop("S needs to be either vector or matrix with nrow == 1 (currently only implemented for one stressor)")
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y))
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
test <- calc_colrow_sums(S, A, Y, 4)
test
Reduce("+", test)
calc_colrow_cumsums <- function(S, A, Y, n) {
if(dim(S)[1] > 1) stop("S needs to be either vector or matrix with nrow == 1
(currently only implemented for one stressor)")
Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- vector(mode = "list", length = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y))
if(i > 1) {
list[[i]][["row.sums"]] <- rowSums(tmp) + list[[i-1]][["row.sums"]]
list[[i]][["col.sums"]] <- colSums(tmp) + list[[i-1]][["col.sums"]]
} else {
list[[i]][["row.sums"]] <- rowSums(tmp)
list[[i]][["col.sums"]] <- colSums(tmp)
}
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
test2 <- calc_colrow_cumsums(S, A, Y, 4)
test2
test2 <- calc_colrow_cumsums(S, A, Y, 8)
test2
lapply(test2, function(x) x$row.sums)
lapply(test2, function(x) x$row.sums %>% sum)
lapply(test2, function(x) x$row.sums %>% sum) %>% as.vector
lapply(test2, function(x) x$row.sums %>% sum) %>% unlist
lapply(test2, function(x) x$row.sums %>% sum) %>% unlist %>% plot
test2 <- calc_colrow_cumsums(S, A, Y, 10)
lapply(test2, function(x) x$row.sums %>% sum) %>% unlist %>% plot
abline(h = S %*% L %*% Y %>% sum)
lapply(test2, function(x) x$row.sums %>% sum) %>% unlist %>% plot(ylim = c(0, 1300))
abline(h = S %*% L %*% Y %>% sum)
test2
Rcpp::sourceCpp('Ftensor.cpp')
spa_rcpp
Rcpp::sourceCpp('Ftensor.cpp')
Rcpp::sourceCpp('Ftensor.cpp')
test <- fread("example.txt")
source("./settings.R")
source("./functions.R")
test <- fread("example.txt")
test
Rcpp::sourceCpp('Ftensor.cpp')
colrow_sums
# exiobase ---------------------------------
path2exiobase <- "/home/simon/Documents/PhD_PROSET/data/EXIOBASE3"
S <- fread(file.path(path2exiobase, "S_1995.csv")) %>%
.[1,] %>% as.matrix
L <- fread(file.path(path2exiobase, "L_1995.csv")) %>% as.matrix
A <- fread(file.path(path2exiobase, "A_1995.csv")) %>% as.matrix
Y <- fread(file.path(path2exiobase, "Y_1995.csv")) %>%
as.matrix %>% rowSums
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, 6))
# calculate row and column sums
calc_colrow_sums <- function(S, A, Y, n) {
if(dim(S)[1] > 1) stop("S needs to be either vector or matrix with nrow == 1
(currently only implemented for one stressor)")
if(!is.null(dim(Y))) Y <- rowSums(Y)
A_new <- diag(1, nrow = nrow(A), ncol = ncol(A))
list <- create_named_list(c("row.sums", "col.sums"))
list[["row.sums"]] <- list[["col.sums"]] <- matrix(ncol = ncol(A), nrow = n)
for(i in 1:n) {
tmp <-  diag(S %>% as.numeric) %*% (A_new %*% diag(Y))
list$row.sums[i,] <- rowSums(tmp)
list$col.sums[i,] <- colSums(tmp)
# list[[i]][["row.sums"]] <- rowSums(tmp)
# list[[i]][["col.sums"]] <- colSums(tmp)
if(i < n) A_new <- A_new %*% A
}
rm(tmp, i, A_new)
gc()
return(list)
}
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, 6))
tol_subtree <- 1068974912
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% sum
})
which(x > tol_subtree) %>% length
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol_subtree <- 1E7
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol_subtree <- 1E8
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol_subtree <- 1E9
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol_subtree <- 1E10
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
}) %>% mult()
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
}) %>% prod
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
gc()
tol_subtree <- 1E11
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
system.time({
spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 3, tol = 1E8, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test
spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 3, tol = 1E6, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
test <- fread("example.txt")
test
tol_subtree <- 1E10
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
system.time({
spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 3, tol = 1E7, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
2156 /60
test <- fread("example.txt")
test <- fread("example.txt")
test <- fread("example.txt")
test <- read.table("example.txt")
test
test <- fread("example.txt")
test <- read.table("example.txt", header = T)
test <- read.table("example.txt", header = F)
readLines("example.txt")
S <- io_table$year0$S
L <- io_table$year0$L
A <- io_table$year0$A
Y <- io_table$year0$Y
system.time(colrow_sums <- calc_colrow_sums(S = S, A = A, Y = Y, 6))
tol_subtree <- 1  #1E10
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol_subtree <- 10  #1E10
apply(colrow_sums$col.sums, 1, function(x) {
which(x > tol_subtree) %>% length
})
tol <- 0.5
system.time({
spa_rcpp(S %>% as.numeric,
A, L, Y %>% as.numeric,
n = 6, tol = tol, tol_subtree = tol_subtree,
row_sums = colrow_sums$row.sums, col_sums = colrow_sums$col.sums)
})
test <- fread("example.txt")
test
